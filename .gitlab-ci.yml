variables:
  GITLAB_ENV: test
  SERVICE: ${SERVICE}

default:
  tags:
    - shell

# ~~~~~~~~~~~~~~~~~~~~~~ #

stages:
  # Only for feature branch merge requests, not for master or release
  - deploy-feature-branch
  # fairdata-e2e and sonarqube 
  - test
  # Deploy to environment
  - deploy
  # Run integration tests
  - integration-test
  # Clean feature branch from staging
#  - clean

# ~~~~~~~~~~~~~~~~~~~~~~ #

deploy-feature-to-staging:
  stage: deploy-feature-branch
  environment: staging
  script:
    - ansible-playbook -i $ANSIBLE_INVENTORY $DEPLOY_PLAYBOOK -e repo_version=${CI_COMMIT_REF_NAME} --vault-id $ANSIBLE_VAULT_FILE
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME !~ /^(master|release)$/
    - if: $CI_PIPELINE_SOURCE !~ /^(web)$/

# ~~~~~~~~~~~~~~~~~~~~~~ #

sonarqube-check:
  tags:
    - docker
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      allow_failure: true
    - if: $CI_COMMIT_BRANCH =~ /^(master)$/ && $CI_PIPELINE_SOURCE !~ /^(web)$/
      allow_failure: true
    - if: $CI_COMMIT_BRANCH =~ /^(release)$/

fairdata-e2e:
  stage: test
  trigger: fairdata/fairdata-ci
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(master|release)$/
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME !~ /^(master|release)$/

# ~~~~~~~~~~~~~~~~~~~~~~ #

deploy:
  stage: deploy
  environment: ${GITLAB_ENV}
  script:
    - ansible-playbook -i $ANSIBLE_INVENTORY $DEPLOY_PLAYBOOK --vault-id $ANSIBLE_VAULT_FILE
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(master)$/
    - if: $CI_PIPELINE_SOURCE =~ /^(web)$/

# ~~~~~~~~~~~~~~~~~~~~~~ #

run-integration-tests:
  stage: integration-test
  environment: ${GITLAB_ENV}
  script:
    - ansible-playbook -i $ANSIBLE_INVENTORY $TEST_PLAYBOOK --vault-id $ANSIBLE_VAULT_FILE
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(master)$/ && $CI_PIPELINE_SOURCE !~ /^(web)$/
    - if: $CI_COMMIT_BRANCH !~ /^(master)$/ && $CI_PIPELINE_SOURCE =~ /^(web)$/

# Re-enable if this is really needed.
# clean-staging:
#   stage: clean
#   needs: ["deploy-feature-to-staging"]
#   script:
#     - ansible-playbook -i $ANSIBLE_INVENTORY_STAGING $DELETE_PLAYBOOK -e repo_version=${CI_COMMIT_REF_NAME} --vault-id $ANSIBLE_VAULT_FILE
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME !~ /^(master)$/
